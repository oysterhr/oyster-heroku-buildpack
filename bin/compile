#!/bin/bash

# `set –e` is used within the Bash to stop execution instantly as a query exits while having a non-zero status. 
# This function is also used when you need to know the error location in the running code
set -e

BUILD_DIR=$1
ENV_DIR=$3

# Get env variables
ENV_ROLE_ARN=$(test -f "$ENV_DIR/ROLE_ARN" && cat "$ENV_DIR/ROLE_ARN" || echo "")
ENV_S3_BUCKET_NAME=$(test -f "$ENV_DIR/S3_BUCKET_NAME" && cat "$ENV_DIR/S3_BUCKET_NAME" || echo "")
ENV_AWS_ACCESS_KEY_ID=$(test -f "$ENV_DIR/AWS_ACCESS_KEY_ID" && cat "$ENV_DIR/AWS_ACCESS_KEY_ID" || echo "")
ENV_AWS_SECRET_ACCESS_KEY=$(test -f "$ENV_DIR/AWS_SECRET_ACCESS_KEY" && cat "$ENV_DIR/AWS_SECRET_ACCESS_KEY" || echo "")
ENV_HEROKU_APP_NAME=$(test -f "$ENV_DIR/HEROKU_APP_NAME" && cat "$ENV_DIR/HEROKU_APP_NAME" || echo "")
ENV_HEROKU_RELEASE_VERSION=$(test -f "$ENV_DIR/HEROKU_RELEASE_VERSION" && cat "$ENV_DIR/HEROKU_RELEASE_VERSION" || date +%s )

if [ -z "$ENV_AWS_ACCESS_KEY_ID" ]; then
  echo "-----> ⏭️  Skipping AWS sync. AWS_ACCESS_KEY_ID is not set"
  exit 0
fi

if [ -z "$ENV_AWS_SECRET_ACCESS_KEY" ]; then
  echo "-----> ⏭️  Skipping AWS sync. AWS_SECRET_ACCESS_KEY is not set"
  exit 0
fi

if [ -z "$ENV_ROLE_ARN" ]; then
  echo "-----> ⏭️  Skipping AWS sync. ROLE_ARN is not set"
  exit 0
fi


if [ -z "$ENV_S3_BUCKET_NAME" ]; then
  echo "-----> ⏭️  Skipping AWS sync. S3_BUCKET_NAME is not set"
  exit 0
fi

if [ -z "$ENV_ROLE_ARN" ]; then
  echo "-----> ⏭️  Skipping AWS sync. ROLE_ARN is not set"
  exit 0
fi


if [ -z "$ENV_HEROKU_APP_NAME" ]; then
  echo "-----> ⏭️  Skipping AWS sync. HEROKU_APP_NAME is not set"
  exit 0
fi

if [ -z "$ENV_HEROKU_RELEASE_VERSION" ]; then
  echo "-----> ⏭️  Skipping AWS sync. HEROKU_RELEASE_VERSION is not set"
  exit 0
fi


echo "-----> ⌛️  Setting env variables"

# Set env variables for aws cli
export AWS_ACCESS_KEY_ID="$ENV_AWS_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$ENV_AWS_SECRET_ACCESS_KEY"

echo "-----> ✅  Env variables set successfully"


echo "-----> ⌛️  Assuming role"

# Assume role
STS=($(aws sts assume-role --quiet --role-arn ${ENV_ROLE_ARN} --role-session-name "${ENV_HEROKU_APP_NAME}-${ENV_HEROKU_RELEASE_VERSION}" --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))

echo "-----> ✅  Role assumed successfully"


echo "-----> ⌛️  Setting new temporary env variables from assumed role"

# Unset env variables for aws cli
unset AWS_SECRET_ACCESS_KEY
unset AWS_ACCESS_KEY_ID

# Set new temporary env variables for aws cli with permissions from assumed role
export AWS_ACCESS_KEY_ID="${STS[0]}"
export AWS_SECRET_ACCESS_KEY="${STS[1]}"
export AWS_SESSION_TOKEN="${STS[2]}"

echo "-----> ✅  New temp env variables set successfully"


echo "-----> ⌛️  Syncing bucket"

# Sync bucket
PUBLIC_FOLDER="$BUILD_DIR/public"
aws s3 sync $PUBLIC_FOLDER s3://$ENV_S3_BUCKET_NAME

echo "-----> ✅  Synced bucket successfully"


echo "-----> ⌛️  Invalidating cache"

# Invalidate cache
# We need to invalidate the cache for manifest.json and manifest-assets.json
# So users get the last hash versioning
aws cloudfront create-invalidation --distribution-id $ENV_HEROKU_RELEASE_VERSION --paths "/manifest.json" "/manifest-assets.json" --no-cli-pager

echo "-----> ✅  Invalidated cache successfully"
